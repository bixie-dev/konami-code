import { 
    Paper, 
    styled, 
    Table, 
    TableBody, 
    TableCell, 
    tableCellClasses, 
    TableContainer, TableHead, 
    TableRow, 
    TextField 
} from '@mui/material'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
import { Issue } from './api/issues';

const StyledTableCell = styled(TableCell)(({ theme }) => ({
    [`&.${tableCellClasses.head}`]: {
        backgroundColor: theme.palette.common.black,
        color: theme.palette.common.white,
    },
    [`&.${tableCellClasses.body}`]: {
        fontSize: 14,
    },
}));

const StyledTableRow = styled(TableRow)(({ theme }) => ({
    '&:nth-of-type(odd)': {
        backgroundColor: theme.palette.action.hover,
    },
    // hide last border
    '&:last-child td, &:last-child th': {
        border: 0,
    },
}));

function createData(
    name: string,
    calories: number,
    fat: number,
    carbs: number,
    protein: number,
) {
    return { name, calories, fat, carbs, protein };
}

const rows = [
    createData('Frozen yoghurt', 159, 6.0, 24, 4.0),
    createData('Ice cream sandwich', 237, 9.0, 37, 4.3),
    createData('Eclair', 262, 16.0, 24, 6.0),
    createData('Cupcake', 305, 3.7, 67, 4.3),
    createData('Gingerbread', 356, 16.0, 49, 3.9),
];

type Visible = 'block' | 'none';
let timestamp: number = 0;

export default function Home() {
    const [issues, setIssues] = useState<Issue[]>([])
    const [issuesVisible, setIssuesVisible] = useState<Visible>('none')
    const [code, setCode] = useState<string>('')

    useEffect(() => {
        fetch('https://api.github.com/repos/elixir-lang/elixir/issues')
        .then(res => res.json())
        .then(data => {
            (data as {title: string, author_association: string}[]).map(issue => {
                issues.push({name: issue.title, author: issue.author_association})
            })
        })

        document.addEventListener('keydown', (e) => {
            if (e.code == 'Escape') {
                setCode('');
            }
        })


        const interval = setInterval(() => {
            if (timestamp === 5000) {
                setCode('');
                timestamp = 0
            }
            timestamp += 1000
        }, 1000)

        return () => clearInterval(interval)
    }, [])

    const handleCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        let code: string = e.target.value;
        setCode(code)

        timestamp = 0
        if (code === 'injects3crets') {
            setIssuesVisible('block')
        } else {
            setIssuesVisible('none')
            setTimeout(() => setIssuesVisible('none'), 15000)
        }
    }

    return (
        <div className={styles.container}>
            <Head>
                <title>Sweet kittens</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <h1 className={styles.title}>
                    Welcome to <a href="#">Sweet kittens</a>
                </h1>

                <TextField value={code} onChange={handleCodeChange} size='small' color='success' />

                <TableContainer component={Paper} sx={{maxWidth: 800, display: issuesVisible}}>
                    <Table aria-label="customized table">
                        <TableHead>
                            <TableRow>
                                <StyledTableCell>Name</StyledTableCell>
                                <StyledTableCell align="right">Author</StyledTableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {issues.map((row) => (
                                <StyledTableRow key={row.name}>
                                    <StyledTableCell component="th" scope="row">
                                        {row.name}
                                    </StyledTableCell>
                                    <StyledTableCell align="right">{row.author}</StyledTableCell>
                                </StyledTableRow>
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>

                <TableContainer component={Paper} sx={{mb: '2rem'}}>
                    <Table sx={{ minWidth: 700 }} aria-label="customized table">
                        <TableHead>
                            <TableRow>
                                <StyledTableCell>Dessert (100g serving)</StyledTableCell>
                                <StyledTableCell align="right">Calories</StyledTableCell>
                                <StyledTableCell align="right">Fat&nbsp;(g)</StyledTableCell>
                                <StyledTableCell align="right">Carbs&nbsp;(g)</StyledTableCell>
                                <StyledTableCell align="right">Protein&nbsp;(g)</StyledTableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {rows.map((row) => (
                                <StyledTableRow key={row.name}>
                                    <StyledTableCell component="th" scope="row">
                                        {row.name}
                                    </StyledTableCell>
                                    <StyledTableCell align="right">{row.calories}</StyledTableCell>
                                    <StyledTableCell align="right">{row.fat}</StyledTableCell>
                                    <StyledTableCell align="right">{row.carbs}</StyledTableCell>
                                    <StyledTableCell align="right">{row.protein}</StyledTableCell>
                                </StyledTableRow>
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>
            </main>

            <footer className={styles.footer}>
                <a
                    href="#"
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    Powered by
                    <span style={{ padding: '0 5px' }}><b>True.Dev</b></span>
                </a>
            </footer>
        </div>
    )
}
